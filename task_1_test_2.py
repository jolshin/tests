import pytest

def cook_book():
    cook_book = [[
                    'салат',
                    [
                        ['картофель', 100, 'гр.'],
                        ['морковь', 50, 'гр.'],
                        ['огурцы', 50, 'гр.'],
                        ['горошек', 30, 'гр.'],
                        ['майонез', 70, 'мл.'],
                    ]
                ],
                [
                    'пицца',
                    [
                        ['сыр', 50, 'гр.'],
                        ['томаты', 50, 'гр.'],
                        ['тесто', 100, 'гр.'],
                        ['бекон', 30, 'гр.'],
                        ['колбаса', 30, 'гр.'],
                        ['грибы', 20, 'гр.'],
                    ],
                ],
                [
                    'фруктовый десерт',
                    [
                        ['хурма', 60, 'гр.'],
                        ['киви', 60, 'гр.'],
                        ['творог', 60, 'гр.'],
                        ['сахар', 10, 'гр.'],
                        ['мед', 50, 'мл.'],
                    ]
                ]]

    return cook_book

def res_true_for_1():
    res_true_for_1 = [
                'Салат', 
                    ('картофель', 100, 'гр.', 'морковь', 50, 'гр.', 'огурцы', 50, 'гр.', 'горошек', 30, 'гр.', 'майонез', 70, 'мл.'), 
                'Пицца', 
                    ('сыр', 50, 'гр.', 'томаты', 50, 'гр.', 'тесто', 100, 'гр.', 'бекон', 30, 'гр.', 'колбаса', 30, 'гр.', 'грибы', 20, 'гр.'), 
                'Фруктовый десерт', 
                    ('хурма', 60, 'гр.', 'киви', 60, 'гр.', 'творог', 60, 'гр.', 'сахар', 10, 'гр.', 'мед', 50, 'мл.')
                ]
    return res_true_for_1

def res_true_for_5():
    res_true_for_5 = [
            'Салат', 
                ('картофель', 500, 'гр.', 'морковь', 250, 'гр.', 'огурцы', 250, 'гр.', 'горошек', 150, 'гр.', 'майонез', 350, 'мл.'), 
            'Пицца', 
                ('сыр', 250, 'гр.', 'томаты', 250, 'гр.', 'тесто', 500, 'гр.', 'бекон', 150, 'гр.', 'колбаса', 150, 'гр.', 'грибы', 100, 'гр.'), 
            'Фруктовый десерт', 
                ('хурма', 300, 'гр.', 'киви', 300, 'гр.', 'творог', 300, 'гр.', 'сахар', 50, 'гр.', 'мед', 250, 'мл.')
            ]
    return res_true_for_5

def res_true_for_123():
    res_true_for_123 = [
            'Салат', 
                ('картофель', 12300, 'гр.', 'морковь', 6150, 'гр.', 'огурцы', 6150, 'гр.', 'горошек', 3690, 'гр.', 'майонез', 8610, 'мл.'), 
            'Пицца', 
                ('сыр', 6150, 'гр.', 'томаты', 6150, 'гр.', 'тесто', 12300, 'гр.', 'бекон', 3690, 'гр.', 'колбаса', 3690, 'гр.', 'грибы', 2460, 'гр.'), 
            'Фруктовый десерт', 
                ('хурма', 7380, 'гр.', 'киви', 7380, 'гр.', 'творог', 7380, 'гр.', 'сахар', 1230, 'гр.', 'мед', 6150, 'мл.')
            ]
    return res_true_for_123

def res_false_for_123():    
    res_false_for_123 = [
            'Салат', 
                ('картофель', 1233, 'гр.', 'морковь', 123, 'гр.', 'огурцы', 6150, 'гр.', 'горошек', 3690, 'гр.', 'майонез', 8610, 'мл.'), 
            'Пицца', 
                ('сыр', 6150, 'гр.', 'томаты', 6150, 'гр.', 'тесто', 32112, 'гр.', 'бекон', 3690, 'гр.', 'колбаса', 3690, 'гр.', 'грибы', 2460, 'гр.'), 
            'Фруктовый десерт', 
                ('хурма', 7380, 'гр.', 'киви', 7380, 'гр.', 'творог', 7380, 'гр.', 'сахар', 1230, 'гр.', 'мед', 6150, 'мл.')
            ]
    return res_false_for_123

#persons = int(input('Введите количество гостей: '))
#persons = 5

def dis_code(persons, cook_book):
    ingredients = []
    meals = []
    for item in cook_book:
        print(item[0].capitalize(), ':', sep='')
        for ingredient in item[1]:
            ingredients.append(ingredient[0])
            ingredients.append(ingredient[1] * persons)
            ingredients.append(ingredient[2])

        meals.append(item[0].capitalize())
        meals.append(tuple(ingredients))
        ingredients.clear()

    return(meals)


@pytest.mark.parametrize(
    "persons, cook_book, expected",
    [(1, cook_book(), res_true_for_1()),
    (5, cook_book(), res_true_for_5()),
    (123, cook_book(), res_true_for_123())
    ]
)
def test_parametrized(persons, cook_book, expected):
    res = dis_code(persons, cook_book)
    assert res == expected

@pytest.mark.xfail
def test_failed():
    persons = 123
    cook_book = cook_book()
    expected = res_false_for_123()
    res = dis_code(persons, cook_book)
    assert res == expected


